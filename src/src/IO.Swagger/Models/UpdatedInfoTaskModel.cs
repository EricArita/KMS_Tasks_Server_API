/*
 * KMS_Tasks Api Doc
 *
 * Api document for backend implementations in KMS_Tasks project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: buiphantho@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UpdatedInfoTaskModel : IEquatable<UpdatedInfoTaskModel>
    { 
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule")]
        public string Schedule { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleString
        /// </summary>
        [DataMember(Name="scheduleString")]
        public string ScheduleString { get; set; }

        /// <summary>
        /// Gets or Sets PriorityId
        /// </summary>
        [DataMember(Name="priorityId")]
        public decimal? PriorityId { get; set; }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name="projectId")]
        public decimal? ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets SectionId
        /// </summary>
        [DataMember(Name="sectionId")]
        public decimal? SectionId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId")]
        public decimal? ParentId { get; set; }

        /// <summary>
        /// Gets or Sets ReminderSchedule
        /// </summary>
        [DataMember(Name="reminderSchedule")]
        public DateTime? ReminderSchedule { get; set; }

        /// <summary>
        /// Gets or Sets Reminder
        /// </summary>
        [DataMember(Name="reminder")]
        public bool? Reminder { get; set; }

        /// <summary>
        /// Gets or Sets AssignedBy
        /// </summary>
        [DataMember(Name="assignedBy")]
        public decimal? AssignedBy { get; set; }

        /// <summary>
        /// Gets or Sets AssignedFor
        /// </summary>
        [DataMember(Name="assignedFor")]
        public decimal? AssignedFor { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name="deleted")]
        public bool? Deleted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdatedInfoTaskModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  ScheduleString: ").Append(ScheduleString).Append("\n");
            sb.Append("  PriorityId: ").Append(PriorityId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  SectionId: ").Append(SectionId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ReminderSchedule: ").Append(ReminderSchedule).Append("\n");
            sb.Append("  Reminder: ").Append(Reminder).Append("\n");
            sb.Append("  AssignedBy: ").Append(AssignedBy).Append("\n");
            sb.Append("  AssignedFor: ").Append(AssignedFor).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdatedInfoTaskModel)obj);
        }

        /// <summary>
        /// Returns true if UpdatedInfoTaskModel instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdatedInfoTaskModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdatedInfoTaskModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Schedule == other.Schedule ||
                    Schedule != null &&
                    Schedule.Equals(other.Schedule)
                ) && 
                (
                    ScheduleString == other.ScheduleString ||
                    ScheduleString != null &&
                    ScheduleString.Equals(other.ScheduleString)
                ) && 
                (
                    PriorityId == other.PriorityId ||
                    PriorityId != null &&
                    PriorityId.Equals(other.PriorityId)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    ProjectId != null &&
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    SectionId == other.SectionId ||
                    SectionId != null &&
                    SectionId.Equals(other.SectionId)
                ) && 
                (
                    ParentId == other.ParentId ||
                    ParentId != null &&
                    ParentId.Equals(other.ParentId)
                ) && 
                (
                    ReminderSchedule == other.ReminderSchedule ||
                    ReminderSchedule != null &&
                    ReminderSchedule.Equals(other.ReminderSchedule)
                ) && 
                (
                    Reminder == other.Reminder ||
                    Reminder != null &&
                    Reminder.Equals(other.Reminder)
                ) && 
                (
                    AssignedBy == other.AssignedBy ||
                    AssignedBy != null &&
                    AssignedBy.Equals(other.AssignedBy)
                ) && 
                (
                    AssignedFor == other.AssignedFor ||
                    AssignedFor != null &&
                    AssignedFor.Equals(other.AssignedFor)
                ) && 
                (
                    Deleted == other.Deleted ||
                    Deleted != null &&
                    Deleted.Equals(other.Deleted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Schedule != null)
                    hashCode = hashCode * 59 + Schedule.GetHashCode();
                    if (ScheduleString != null)
                    hashCode = hashCode * 59 + ScheduleString.GetHashCode();
                    if (PriorityId != null)
                    hashCode = hashCode * 59 + PriorityId.GetHashCode();
                    if (ProjectId != null)
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (SectionId != null)
                    hashCode = hashCode * 59 + SectionId.GetHashCode();
                    if (ParentId != null)
                    hashCode = hashCode * 59 + ParentId.GetHashCode();
                    if (ReminderSchedule != null)
                    hashCode = hashCode * 59 + ReminderSchedule.GetHashCode();
                    if (Reminder != null)
                    hashCode = hashCode * 59 + Reminder.GetHashCode();
                    if (AssignedBy != null)
                    hashCode = hashCode * 59 + AssignedBy.GetHashCode();
                    if (AssignedFor != null)
                    hashCode = hashCode * 59 + AssignedFor.GetHashCode();
                    if (Deleted != null)
                    hashCode = hashCode * 59 + Deleted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdatedInfoTaskModel left, UpdatedInfoTaskModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdatedInfoTaskModel left, UpdatedInfoTaskModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
