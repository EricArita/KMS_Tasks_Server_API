/*
 * KMS_Tasks Api Doc
 *
 * Api document for backend implementations in KMS_Tasks project
 *
 * OpenAPI spec version: 1.0.0
 * Contact: buiphantho@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TasksApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new task</remarks>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        /// <response code="400">Invalid input, object invalid</response>
        [HttpPost]
        [Route("/KMS_Tasks/Api_Doc/1.0.0/api/v1/Task/task")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddTask")]
        public virtual IActionResult AddTask([FromBody]NewTaskModel body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get all of related tasks of an user</remarks>
        /// <param name="userId"></param>
        /// <param name="category">Category Id by which you wanna get tasks</param>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/KMS_Tasks/Api_Doc/1.0.0/api/v1/Task/{userId}/tasks")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetTasks")]
        [SwaggerResponse(statusCode: 200, type: typeof(Response), description: "Success")]
        public virtual IActionResult GetTasks([FromRoute][Required]decimal? userId, [FromQuery]decimal? category)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Response));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0.8008281904610115,\n  \"data\" : \"\",\n  \"ok\" : true,\n  \"message\" : \"message\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Response>(exampleJson)
                        : default(Response);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>update or soft delete a task</remarks>
        /// <param name="taskId"></param>
        /// <param name="body"></param>
        /// <response code="200">Success</response>
        [HttpPatch]
        [Route("/KMS_Tasks/Api_Doc/1.0.0/api/v1/Task/task/{taskId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateTask")]
        [SwaggerResponse(statusCode: 200, type: typeof(Response), description: "Success")]
        public virtual IActionResult UpdateTask([FromRoute][Required]decimal? taskId, [FromBody]UpdatedInfoTaskModel body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Response));
            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0.8008281904610115,\n  \"data\" : \"\",\n  \"ok\" : true,\n  \"message\" : \"message\",\n  \"errors\" : [ \"errors\", \"errors\" ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Response>(exampleJson)
                        : default(Response);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
