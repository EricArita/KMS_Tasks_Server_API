// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Core.Domain.DbEntities
{
    public partial class Tasks
    {
        public Tasks()
        {
            InverseParent = new HashSet<Tasks>();
        }

        [Key]
        public int Id { get; set; }
        [Required]
        [StringLength(100)]
        public string Name { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime CreatedDate { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? Schedule { get; set; }
        [StringLength(50)]
        public string ScheduleString { get; set; }
        public int? PriorityId { get; set; }
        public bool Deleted { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? UpdatedDate { get; set; }
        public int? ProjectId { get; set; }
        public int? SectionId { get; set; }
        public int? ParentId { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? ReminderSchedule { get; set; }
        public bool Reminder { get; set; }
        public int? AssignedBy { get; set; }
        public int? AssignedFor { get; set; }
        public int? CreatedBy { get; set; }

        public virtual AspNetUsers AssignedByNavigation { get; set; }
        public virtual AspNetUsers AssignedForNavigation { get; set; }
        public virtual AspNetUsers CreatedByNavigation { get; set; }
        [ForeignKey(nameof(ParentId))]
        [InverseProperty(nameof(Tasks.InverseParent))]
        public virtual Tasks Parent { get; set; }
        [ForeignKey(nameof(PriorityId))]
        [InverseProperty(nameof(PriorityLevel.Tasks))]
        public virtual PriorityLevel Priority { get; set; }
        [ForeignKey(nameof(ProjectId))]
        [InverseProperty("Tasks")]
        public virtual Project Project { get; set; }
        [ForeignKey(nameof(SectionId))]
        [InverseProperty(nameof(Sections.Tasks))]
        public virtual Sections Section { get; set; }
        [InverseProperty(nameof(Tasks.Parent))]
        public virtual ICollection<Tasks> InverseParent { get; set; }
    }
}